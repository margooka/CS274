* * * GOALS: * * *
-Implement the incremental insertion algorithm
	(1) Use their suboptimal “walking” method for point location
	(2) Implement fast point location, based on either conflict lists or a history dag
			-will need to modify the point location data structure slightly
-Write brief paper
	-Instructions for compiling and running your code. If you use C/C++ and Unix, relatively rudimentary instructions will probably do. Be sure to document how to specify the input file, and how to choose between different algorithms.
	-A table containing timings for each of your algorithms or point location methods on random points sets (top of this page) of 10,000, 100,000, and 1,000,000 points. 
		- (If the “walking” method of point location takes longer than thirty minutes on large point sets, just note that you couldn't wait for it to terminate.) 
			-Time only the randomized versions of the incremental insertion algorithm. 
		- Try to exclude all file I/O from your timings if possible. (If using a timer within your program isn't possible, the Unix time command will do, although file I/O time will be included.) 
		-Why do you think the fastest algorithm is fastest?
	-For the incremental algorithm only: create an orderly point set, like a square grid whose vertices are given in a structured order. 
		- Does failing to randomize the order of the vertices significantly change the running time of the incremental insertion algorithm with the fast point location method?
	-If you borrowed any code, please give full credit.

* * * NOTES: * * *
-Implementations must use Guibas and Stolfi's quad-edge data structure
-Can skip Section 3
-Test files located in folder "testfiles"
-Visuallization using the Triangle thing

* * * SPECIFICATIONS: * * *
-Use same format as "Triangle" (http://www.cs.cmu.edu/~quake/triangle.html)
	-Should read files with suffix .node and write file with suffix .ele
		-.node (http://www.cs.cmu.edu/~quake/triangle.node.html)
		-.ele (http://www.cs.cmu.edu/~quake/triangle.ele.html)
-Use Shewchuk's robust geometric predicates (in C)
	-http://www.cs.cmu.edu/~quake/robust.html
	-https://javapapers.com/core-java/how-to-call-a-c-program-from-java/
-Must write quad-edge implementation and geometric algorithms by yourself
	-fundamental non-geometric datastructures can use borrowed code



